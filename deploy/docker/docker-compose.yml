version: '3.8'

services:
  postgres:
    container_name: postgres
    image: postgres:14.2-alpine
    networks:
      - network
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U username -d app" ]
      interval: 5s
      timeout: 5s
      retries: 3

  backend:
    container_name: backend
    image: ghcr.io/neoisalie/tt_backend/app:latest
    ports:
      - 3000:3000
    environment:
      DATABASE_URL: 'postgresql://username:password@postgres/app'
      SCRIPT: start_app.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/v1/healthcheck/" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - network

  worker:
    container_name: worker
    image: ghcr.io/neoisalie/tt_backend/worker:latest
    environment:
      DATABASE_URL: 'postgresql://username:password@postgres/app'
      SCRIPT: start_worker.sh
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - network

  dashboard:
    container_name: dashboard
    build:
      context: ../../
      dockerfile: deploy/docker/Dockerfile
    ports:
      - 8000:8000
    environment:
      SERVER_URL: 'http://backend:3000/api/v1'
      SCRIPT: start_app.sh
      HOST: 0.0.0.0
      PORT: 8000
      DEBUG: 1
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - network

networks:
  network:
